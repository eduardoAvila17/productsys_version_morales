/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import programas.ver_conex;

/**
 *
 * @author hp
 */
public class ordencompra extends javax.swing.JFrame {
ver_conex conn = new ver_conex();
 //publicamos el cursor
  javax.swing.table.DefaultTableModel cursor;
    /**
     * Creates new form ordencompra
     */
    public ordencompra() {
        initComponents();
        cursor = (javax.swing.table.DefaultTableModel)grilla.getModel();
         des_text();
       //   tcodsuc.setText(acceso.pasarsuccod());//codigo de sucursal
         //      sucursal.setText(acceso_sis.pasarsucur()); // sucursal
                 txtcodper.setText(acceso.usucod);//codigo usuario
                  //   nombre.setText(acceso_sis.pasarusu());    //nombre de usuario
                    //   apellido.setText(acceso_sis.usuape());  //apellido de usuario
                        lnombre.setText(acceso.usunom);
        lfecha.setText(acceso.fechasistema);
      //   fecha.setText(acceso.fechasistema);
         txtcodsucursal.setText(acceso.ususucur);
         txtsucurdescri.setText(acceso.sucurdescri);
         txtcodsucursal.setEnabled(false);
         txtsucurdescri.setEnabled(false);
         txtcodper.setEnabled(false);
         this.setLocationRelativeTo(null);
         hab_botones();
      //   baprobar.setEnabled(false);
//         beditar.setEnabled(false);
         bproducto.setEnabled(false);
           Timer time = new Timer(250, new escucha());
            time.start();
    }
 class escucha implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            Calendar ahora = Calendar.getInstance();
            int hor = ahora.get(Calendar.HOUR_OF_DAY);
            int min = ahora.get(Calendar.MINUTE);
            int seg = ahora.get(Calendar.SECOND);
            hora.setText(hor + ":" + min + ":" + seg);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        borden = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        grilla = new javax.swing.JTable();
        txttotal = new javax.swing.JTextField();
        bpedidos = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lcodigo = new javax.swing.JLabel();
        txtcodigo = new javax.swing.JTextField();
        lcodigo2 = new javax.swing.JLabel();
        lnombre = new javax.swing.JLabel();
        lcodigo3 = new javax.swing.JLabel();
        txtcodsucursal = new javax.swing.JTextField();
        txtsucurdescri = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lfecha = new javax.swing.JLabel();
        hora = new javax.swing.JLabel();
        txtcodper = new javax.swing.JTextField();
        boton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bsalir = new javax.swing.JButton();
        bcancelar = new javax.swing.JButton();
        bgrabar = new javax.swing.JButton();
        banular = new javax.swing.JButton();
        bagregar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        fecha1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtdepdescri = new javax.swing.JTextField();
        txtdepcod = new javax.swing.JTextField();
        txtprodescri = new javax.swing.JTextField();
        lcodigo1 = new javax.swing.JLabel();
        txtprocod = new javax.swing.JTextField();
        lcodclientes = new javax.swing.JLabel();
        pedido = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        txtcantidad = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtdescri = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtmercacod = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bproducto = new javax.swing.JButton();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        borden.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        borden.setText("Buscar ordenes");
        borden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bordenActionPerformed(evt);
            }
        });
        borden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bordenKeyPressed(evt);
            }
        });

        grilla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripcion", "Cantidad", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grillaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(grilla);

        txttotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttotalActionPerformed(evt);
            }
        });
        txttotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txttotalKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txttotalKeyTyped(evt);
            }
        });

        bpedidos.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bpedidos.setText("Buscar pedidos ");
        bpedidos.setEnabled(false);
        bpedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpedidosActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel7.setText("Orden de compra");

        lcodigo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lcodigo.setText("Sucursal:");

        txtcodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcodigoActionPerformed(evt);
            }
        });

        lcodigo2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lcodigo2.setText("Codigo :");

        lnombre.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lnombre.setText("Nombre");

        lcodigo3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lcodigo3.setText("Personal :");

        txtcodsucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcodsucursalActionPerformed(evt);
            }
        });
        txtcodsucursal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcodsucursalKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcodsucursalKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Fecha:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Hora :");

        lfecha.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lfecha.setText("Fechasistema");

        hora.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora.setText("Hora sistema");

        txtcodper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcodperActionPerformed(evt);
            }
        });
        txtcodper.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcodperKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcodperKeyTyped(evt);
            }
        });

        boton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(14, 14, 14)
                        .addComponent(lfecha)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hora))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lcodigo2)
                        .addGap(8, 8, 8)
                        .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(lcodigo3)
                        .addGap(7, 7, 7)
                        .addComponent(txtcodper, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lnombre)
                        .addGap(18, 18, 18)
                        .addComponent(lcodigo)
                        .addGap(18, 18, 18)
                        .addComponent(txtcodsucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtsucurdescri, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 152, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(lfecha)
                        .addComponent(jLabel5)
                        .addComponent(hora))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lcodigo2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lcodigo)
                        .addComponent(lnombre)
                        .addComponent(lcodigo3)
                        .addComponent(txtcodsucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtsucurdescri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtcodper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtcodigo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("TOTAL :");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        bsalir.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bsalir.setText("Salir");
        bsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsalirActionPerformed(evt);
            }
        });

        bcancelar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bcancelar.setText("Cancelar");
        bcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancelarActionPerformed(evt);
            }
        });

        bgrabar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bgrabar.setText("Grabar");
        bgrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgrabarActionPerformed(evt);
            }
        });

        banular.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        banular.setText("Anular");
        banular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                banularActionPerformed(evt);
            }
        });

        bagregar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bagregar.setText("Agregar");
        bagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bagregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(bagregar)
                .addGap(18, 18, 18)
                .addComponent(banular)
                .addGap(18, 18, 18)
                .addComponent(bgrabar)
                .addGap(18, 18, 18)
                .addComponent(bcancelar)
                .addGap(18, 18, 18)
                .addComponent(bsalir)
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bagregar)
                    .addComponent(banular)
                    .addComponent(bgrabar)
                    .addComponent(bcancelar)
                    .addComponent(bsalir))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la Orden de Compra"));

        fecha1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fecha1ActionPerformed(evt);
            }
        });
        fecha1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fecha1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecha1KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Fecha :");

        txtdepcod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdepcodActionPerformed(evt);
            }
        });
        txtdepcod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtdepcodKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtdepcodKeyTyped(evt);
            }
        });

        lcodigo1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lcodigo1.setText("Deposito :");

        txtprocod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtprocodActionPerformed(evt);
            }
        });
        txtprocod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtprocodKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtprocodKeyTyped(evt);
            }
        });

        lcodclientes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lcodclientes.setText("Cod proveeedor :");

        pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoActionPerformed(evt);
            }
        });
        pedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pedidoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pedidoKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Nro de pedido : ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lcodclientes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtprocod, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtprodescri, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lcodigo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtdepcod, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtdepdescri, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtprodescri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtprocod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lcodclientes)
                        .addComponent(lcodigo1)
                        .addComponent(txtdepdescri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtdepcod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Para agregar mas productos presione el boton Agregar Productos"));

        txtcantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcantidadActionPerformed(evt);
            }
        });
        txtcantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcantidadKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcantidadKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Cantidad :");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Descripcion :");

        txtmercacod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmercacodActionPerformed(evt);
            }
        });
        txtmercacod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmercacodKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmercacodKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Codigo Producto:");

        bproducto.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bproducto.setText("Agregar producto");
        bproducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bproductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bproducto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtmercacod, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtdescri, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bproducto)
                    .addComponent(jLabel1)
                    .addComponent(txtmercacod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtdescri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(106, 106, 106)
                            .addComponent(bpedidos)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(borden))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borden, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpedidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtmercacodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmercacodActionPerformed
        // TODO add your handling code here:
        buscar_cod();

    }//GEN-LAST:event_txtmercacodActionPerformed

    private void txtmercacodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmercacodKeyPressed
        // TODO add your handling code here:
        if (txtmercacod.getText().equals("") && evt.getKeyChar() == KeyEvent.VK_ENTER) {// presiona F12
            new bus_art(null,true).setVisible(true);// llama al buscador

            if (bus_art.vdes.isEmpty())//no trae nada
            {
                return;
            }else // trae datos
            {
                txtmercacod.setText(bus_art.vcod);
                txtdescri.setText((bus_art.vdes));
              //  txtprecio.setText(bus_art.vprecio);
               // txttotal.requestFocus();

            }
        }//fin F12

        if(evt.getKeyCode()==35) { // presiona TECLA FIN
            bgrabar.setEnabled(true);
          //  bgrabar.requestFocus();
            txtcantidad.setEnabled(true);
            txtcantidad.requestFocus();
        }
        //          if (txtmerca.getText().equals("") && evt.getKeyChar() == KeyEvent.VK_ENTER)//no trae nada
        //        {
            //            JTextField[] tfParam = new JTextField[2];
            //            tfParam[0] = this.txtmerca;
            //            tfParam[1] = this.txtdescri;
            //            VentanaBuscar buscador = new VentanaBuscar("select mer_cod,mer_nom from mercaderia where mer_nom like  ", new String[]{"CODIGO marca", "NOMBRE marca"}, 2, tfParam);
            //            buscador.setTitle("Buscar Merca");
            //            buscador.setVisible(true);
            //    }
    }//GEN-LAST:event_txtmercacodKeyPressed

    private void txtmercacodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmercacodKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
            (caracter > '9')) &&
        (caracter != evt.VK_BACK_SPACE)) {
        evt.consume();
        }
    }//GEN-LAST:event_txtmercacodKeyTyped

    private void bordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bordenActionPerformed

        {

                JTextField[] tfParam = new JTextField[2];
                tfParam[0] = this.txtcodigo;
                //                     //   tfParam[1] = this.txtprodescri;
                //
                ////JTextField[] tfParam = new JTextField[2];
                //  //                      tfParam[0] = this.txtcodigo;
                ventanabuscador buscador = new ventanabuscador("SELECT o.oc_cod,o.fecha,u.usu_nomb,s.suc_desc,d.depo_desc FROM cabecera_oc AS o,usuario AS u, sucursal AS s,deposito AS d WHERE s.suc_cod=o.suc_cod AND o.usu_cod=u.usu_cod AND d.depo_cod=o.depo_cod  AND  oc_est='PENDIENTE' AND o.suc_cod= "+txtcodsucursal.getText()+"  like  "  , new String[]{"NUMERO","Fecha","Personal","Sucursal","Deposito"},5, tfParam);
                
                buscador.setTitle("Buscar ordenes de compra ");
                buscador.setVisible(true);
                //                        combodeposito.requestFocus();
                //                       // combo_deposito();
                //                        buscador.setVisible(true);
                //              VentanaBuscar buscador = new VentanaBuscar ("SELECT ped_cod,ped_fech,per_nom,suc_nom,dep_descri,suc_cod from pedido as p inner join personal as per on p.per_cod=per.per_cod inner join deposito as d on d.dep_cod=p.dep_cod inner join sucursal as s on s.suc_cod=p.suc_cod WHERE  p.ped_est='habilitado' AND p.suc_cod="+txtcodsucursal.getText()+"  like "  , new String[]{"NUMERO","Fecha","Personal","Sucursal","Deposito","sucursalcod"},6, tfParam);
                //           buscador.setTitle("Buscar proveedor");
                //                      //  combodeposito.requestFocus();
                //  
        }
                               txtcodigo.setEnabled(true);
                               txtcodigo.requestFocus();
                               banular.setEnabled(true);
               // boton.setEnabled(true);
                bgrabar.setEnabled(false);
                

                //

                //
                //
                //
                //  buscarpedis();
    }//GEN-LAST:event_bordenActionPerformed

    private void bordenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bordenKeyPressed
        // TODO add your handling code here:
        //    buscarpedis();

    }//GEN-LAST:event_bordenKeyPressed

    private void grillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grillaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_grillaMouseClicked

    private void txttotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalActionPerformed
        // TODO add your handling code here:
        try {
            String cant;
            cant = txttotal.getText();
            int multnum = 0;
            multnum = Integer.parseInt(cant);
            if (multnum <= 0) {
                JOptionPane.showMessageDialog(null, "TIENE QUE SER UN N° POSITIVO Y UN NUMERO MAYOR A CERO ");
                txttotal.requestFocus();
            } else {

                //this.bañadir.setEnabled(true);
                tirar_grillas();
            }
        } catch (Exception e) {
            getToolkit().beep();
        }

        //busca_detalle();

        //         try {
            //            String cant;
            //            cant = txtcantidad.getText();
            //            int multnum = 0;
            //            multnum = Integer.parseInt(cant);
            //            if (multnum <= 0) {
                //                JOptionPane.showMessageDialog(null, "TIENE QUE SER UN N° POSITIVO Y UN NUMERO MAYOR A CERO ");
                //                  txtcantidad.requestFocus();
                //            } else {

                //this.bañadir.setEnabled(true);
                // tirar_grilla();
                //            }
            //        } catch (Exception e) {
            //            //getToolkit().beep();
            //        }

    }//GEN-LAST:event_txttotalActionPerformed

    private void txttotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttotalKeyPressed
        //  TODO add your handling code here:
        //        if(evt.getKeyCode()==10){ // presiona ENTER
            //            ////verifica si ya esta cargado
            //            boolean encontro = false;
            //            // int lugar = 0;
            //
            //            for(int a=0;a<grilla.getRowCount();a++) {
                //                // Object cod    =grilla.getValueAt(a,0);
                //                if(txtmercacod.getText().equals(grilla.getValueAt(a,0).toString())) {
                    //                    //lugar = a;
                    //                    encontro = true;
                    //                    cursor.removeRow(a);
                    //                }
                //            }
            //            ////fin verificacion
            //            if (txtcantidad.getText().equals("0") &&  evt.getKeyChar() == KeyEvent.VK_ENTER) {//no trae nada
                //
                //              //  JOptionPane.showMessageDialog(null, "Ingrese un numero positivo mayor a cero", "MENSAJE", JOptionPane.ERROR_MESSAGE);
                //                this.txtcantidad.setText("");
                //                this.txtcantidad.requestFocus();
                //
                //               }
            //             if (txtcantidad.getText().equals("") && evt.getKeyChar() == KeyEvent.VK_ENTER)
            //            {
                //               JOptionPane.showMessageDialog(null, "Ingrese un numero positivo mayor a cero", "MENSAJE", JOptionPane.ERROR_MESSAGE);
                //                this.txtcantidad.setText("");
                //                this.txtcantidad.requestFocus();
                //            }
            //            else{
                //             String registro[] = new String[] {txtmercacod.getText(),txtdescri.getText(),txtcantidad.getText()};
                //             cursor.addRow(registro);
                //              txtcantidad.setEnabled(false);
                //
                //            txtdescri.setText("");
                //            txtcantidad.setText("");
                //            txtmercacod.setText("");
                //            txtmercacod.setEnabled(true);
                //            txtmercacod.requestFocus();
                //            }
            ////          //  int subtotal;
            ////      //      subtotal =  Integer.parseInt(txtcantidad.getText()) * Integer.parseInt(txtprecio.getText());
            ////
            ////            //variable
            ////       //     total = total + subtotal;
            ////
            ////            //objeto cuadro de texto
            ////          //  txttotal.setText(String.valueOf(total));
            ////
            ////            //txtletras.setText(numero.nletra(total));
            ////
            ////            /////tira a la grilla
            ////
            //////            if(iva.equals("0")) // exenta
            //////            {
                //////                String registro[] = new String[] {txtmercacod.getText(),txtdescri.getText(),txtprecio.getText(),txtcantidad.getText(),String.valueOf(subtotal),"0","0"};
                //////                cursor.addRow(registro);
                //////            }
            //////
            //////            if(iva.equals("5"))//gravada 5%
            //////            {
                //////                String registro[] = new String[] {txtmercacod.getText(),txtdescri.getText(),txtprecio.getText(),txtcantidad.getText(),"0",String.valueOf(subtotal),"0"};
                //////                cursor.addRow(registro);
                //////                totaliva5 = totaliva5 + (subtotal/21);
                //////                this.txtiva5.setText(String.valueOf(totaliva5));
                //////
                //////            }
            //////
            //////            if(iva.equals("10")) // gravada 10 %
            //////            {
                //////                String registro[] = new String[] {txtmercacod.getText(),txtdescri.getText(),txtprecio.getText(),txtcantidad.getText(),"0","0",String.valueOf(subtotal)};
                //////                cursor.addRow(registro);
                //////                totaliva10 = totaliva10 + (subtotal /11);
                //////                this.txtiva10.setText(String.valueOf(totaliva10));
                //////
                //////            }
            //////
            //////            totaliva = totaliva5 + totaliva10;
            //////            this.txtivatot.setText(String.valueOf(totaliva));
            //////
            //////            /////
            //////            limpiartextgrilla();
            //////            txtcantidad.setEnabled(false);
            //////            txtmercacod.setEnabled(true);
            //////            txtmercacod.requestFocus();
            //// }
    }//GEN-LAST:event_txttotalKeyPressed

    private void txttotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttotalKeyTyped
        // TODO add your handling code here:

        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
            (caracter > '9')) &&
        (caracter != evt.VK_BACK_SPACE)) {
        evt.consume();
        }
    }//GEN-LAST:event_txttotalKeyTyped

    private void bcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancelarActionPerformed
        // TODO add your handling code here:
        limpiargrilla();
        this.txtcodigo.setEnabled(false);
        borrar_text();

        hab_botones();
//        beditar.setEnabled(false);
        des_text();
        //combodeposito.removeAllItems();

        //        txtcodigo.setEnabled(false);
        //        txtclinom.setEnabled(false);
        //        txtclinom.setText("");
        // hab_botones();
        //  txtiva5.setText("0");
        //        txtiva10.setText("0");
        //   des_text();
    }//GEN-LAST:event_bcancelarActionPerformed

    private void bgrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgrabarActionPerformed
        // TODO add your handling code here:
        
        grabar();
        borrar_text();
        //        limpiartextgrilla();
        limpiargrilla();
      //  bcancelar.doClick();
    }//GEN-LAST:event_bgrabarActionPerformed

    private void banularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_banularActionPerformed
        // TODO add your handling code here:
        anular();
        des_botones();
        borrar_text();
        hab_botones();
        limpiargrilla();
        this.bsalir.setEnabled(true);
        this.bcancelar.setEnabled(true);
        
        //        bandera="borrar";
        //        des_botones();
        //        txtcodigo.setEnabled(true);
        //        txtcodigo.requestFocus();
        //        txtcodigo.setEnabled(true);
        //        txtcodigo.requestFocus();
    }//GEN-LAST:event_banularActionPerformed

    private void txtprocodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtprocodActionPerformed
        // TODO add your handling code here:
     //   buscarproveedor();
        //  combo_deposito();
    }//GEN-LAST:event_txtprocodActionPerformed

    private void txtprocodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprocodKeyPressed
        // TODO add your handling code here:
        if (txtprocod.getText().equals("") && evt.getKeyChar() == KeyEvent.VK_ENTER)//no trae nada
        {
            JTextField[] tfParam = new JTextField[2];
            tfParam[0] = this.txtprocod;
            tfParam[1] = this.txtprodescri;

            VentanaBuscar buscador = new VentanaBuscar("select pro_cod,pro_nom from proveedor where pro_nom like  ", new String[]{"CODIGO proveedor", "NOMBRE proveedor"}, 2, tfParam);
            buscador.setTitle("Buscar proveedor");
         //   combodeposito.requestFocus();
            // combo_deposito();
            buscador.setVisible(true);
            //buscador.setFocusCycleRoot(rootPaneCheckingEnabled);
            // this.setLocationRelativeTo(null);

            // txtmercacod.requestFocus();
        }

    }//GEN-LAST:event_txtprocodKeyPressed

    private void txtprocodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprocodKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
            (caracter > '9')) &&
        (caracter != evt.VK_BACK_SPACE)) {
        evt.consume();
        }
    }//GEN-LAST:event_txtprocodKeyTyped

    private void bagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bagregarActionPerformed
        //        combo_deposito();
        //  private void combo_deposito(){
            txtcodper.setText(acceso.usucod);//codigo usuario
            //   nombre.setText(acceso_sis.pasarusu());    //nombre de usuario
            //   apellido.setText(acceso_sis.usuape());  //apellido de usuario
            lnombre.setText(acceso.usunom);
            lfecha.setText(acceso.fechasistema);
            //   fecha.setText(acceso.fechasistema);
            txtcodsucursal.setText(acceso.ususucur);
            txtsucurdescri.setText(acceso.sucurdescri);
            txtcodsucursal.setEnabled(false);
            txtsucurdescri.setEnabled(false);
            txtcodper.setEnabled(false);

            gencod();
           // hab_text();
            des_botones();
            pedido.setEnabled(true);
            pedido.requestFocus();
           // bmercaderia.setEnabled(true);
            //bproveedor.setEnabled(true);
            mostrar_fecha();
         //   bpedidos.setEnabled(true);
           //  bpedidos.requestFocus();
             txtcodigo.setEnabled(false);
          //  combo_deposito();
            // combodeposito.addItem(c.resultado.getString("a"));
            //   combodeposito.addItemListener(null);
            // TODO add your handling code here:

             bpedidos.setEnabled(true);
    }//GEN-LAST:event_bagregarActionPerformed

    private void txtcodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcodigoActionPerformed
        // TODO add your handling code here:
        // busca_detalle();
     //   beditar.setEnabled(true);
        bgrabar.setEnabled(false);
        buscarorden();
        txttotal.setEnabled(false);
        txtmercacod.setEnabled(false);
      //  txtmercacod.requestFocus();
        txtcodigo.setEnabled(false);

    }//GEN-LAST:event_txtcodigoActionPerformed

    private void txtcodsucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcodsucursalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodsucursalActionPerformed

    private void txtcodsucursalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodsucursalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodsucursalKeyPressed

    private void txtcodsucursalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodsucursalKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodsucursalKeyTyped

    private void txtcodperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcodperActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodperActionPerformed

    private void txtcodperKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodperKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodperKeyPressed

    private void txtcodperKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodperKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodperKeyTyped

    private void bsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_bsalirActionPerformed

    private void txtdepcodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdepcodActionPerformed
        // TODO add your handling code here:
         buscardepo();
    }//GEN-LAST:event_txtdepcodActionPerformed

    private void txtdepcodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdepcodKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdepcodKeyPressed

    private void txtdepcodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdepcodKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdepcodKeyTyped

    private void pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoActionPerformed
        // TODO add your handling code here:
        buscarfactura();
        busca_detalle();
//        buscar_deposito();
//        this.pedido.setEnabled(false);
//         this.bgrabar.setEnabled(true);
//         this.bgrabar.requestFocus();
//         bproducto.setEnabled(true);
       
    }//GEN-LAST:event_pedidoActionPerformed

    private void pedidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pedidoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_pedidoKeyPressed

    private void pedidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pedidoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_pedidoKeyTyped

    private void txtcantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcantidadActionPerformed
        // TODO add your handling code here:
         try {
            String cant;
            cant = txtcantidad.getText();
            int multnum = 0;
            multnum = Integer.parseInt(cant);
            if (multnum <= 0) {
                JOptionPane.showMessageDialog(null, "TIENE QUE SER UN N° POSITIVO Y UN NUMERO MAYOR A CERO ");
                  txtcantidad.requestFocus();
            } else {
               
                //this.bañadir.setEnabled(true);
                 tirardatos();
            }
        } catch (Exception e) {
            getToolkit().beep();
        }
         
       
    }//GEN-LAST:event_txtcantidadActionPerformed

    private void txtcantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcantidadKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcantidadKeyPressed

    private void txtcantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcantidadKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcantidadKeyTyped

    private void bproductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bproductoActionPerformed
        // TODO add your handling code here:
          txtmercacod.setEnabled(true);
         txtmercacod.requestFocus();
    }//GEN-LAST:event_bproductoActionPerformed

    private void bpedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpedidosActionPerformed
        // TODO add your handling code here:
       // TODO add your handling code here:
         this.bagregar.setEnabled(false);
         this.bcancelar.setEnabled(true);

         //if(evt.getKeyCode()==KeyEvent.VK_ENTER)
         {
             JTextField[] tfParam = new JTextField[1];
             tfParam[0] = this.pedido;

             ventanabuscador pp = new ventanabuscador("SELECT c.pedi_cod,c.fecha,d.depo_desc,s.suc_desc FROM cabecera_pedidos c,deposito d,sucursal s,detalle_pedido t WHERE t.depo_cod=d.depo_cod AND s.suc_cod=c.suc_cod AND c.pedi_est='PENDIENTE' AND c.suc_cod="+txtcodsucursal.getText()+"  like  ", new String[]{"NUMERO","Fecha","Deposito","Sucursal"},4, tfParam);
             pp.setTitle("BUSCADOR DE PEDIDO");
             pp.setVisible(true);


             this.pedido.setEnabled(true);
             this.pedido.requestFocus();
         }

        //        salir();
    }//GEN-LAST:event_bpedidosActionPerformed

    private void fecha1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_fecha1KeyTyped

    private void fecha1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_fecha1KeyPressed

    private void fecha1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecha1ActionPerformed
        // TODO add your handling code here:
        txtmercacod.requestFocus();
    }//GEN-LAST:event_fecha1ActionPerformed

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
        // TODO add your handling code here:
        mostrar_fecha();
        des_botones();
        bgrabar.setEnabled(false);
        txtcodigo.setEnabled(true);
        txtcodigo.requestFocus();
        // banular.setEnabled(true);
        banular.setEnabled(false);
        //tcodin2.setEnabled(true);
        //  tcodin2.requestFocus();
    }//GEN-LAST:event_botonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ordencompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ordencompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ordencompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ordencompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ordencompra().setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bagregar;
    private javax.swing.JButton banular;
    private javax.swing.JButton bcancelar;
    private javax.swing.JButton bgrabar;
    private javax.swing.JButton borden;
    private javax.swing.JButton boton;
    private javax.swing.JButton bpedidos;
    private javax.swing.JButton bproducto;
    private javax.swing.JButton bsalir;
    private javax.swing.JTextField fecha1;
    private javax.swing.JTable grilla;
    private javax.swing.JLabel hora;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lcodclientes;
    private javax.swing.JLabel lcodigo;
    private javax.swing.JLabel lcodigo1;
    private javax.swing.JLabel lcodigo2;
    private javax.swing.JLabel lcodigo3;
    private javax.swing.JLabel lfecha;
    private javax.swing.JLabel lnombre;
    private javax.swing.JTextField pedido;
    private javax.swing.JTextField txtcantidad;
    private javax.swing.JTextField txtcodigo;
    private javax.swing.JTextField txtcodper;
    private javax.swing.JTextField txtcodsucursal;
    private javax.swing.JTextField txtdepcod;
    private javax.swing.JTextField txtdepdescri;
    private javax.swing.JTextField txtdescri;
    private javax.swing.JTextField txtmercacod;
    private javax.swing.JTextField txtprocod;
    private javax.swing.JTextField txtprodescri;
    private javax.swing.JTextField txtsucurdescri;
    private javax.swing.JTextField txttotal;
    // End of variables declaration//GEN-END:variables
  private void hab_text(){
    txtcodigo.setEnabled (true);
    txtprocod.setEnabled(false);
    //combodeposito.setEnabled(true);
    fecha1.setEnabled(true);
    txtmercacod.setEnabled(false);
}
private void des_text(){
   txtcodigo.setEnabled (false);
   pedido.setEnabled(false);
    txtprocod.setEnabled(false);
    //combodeposito.setEnabled(false);
    fecha1.setEnabled(false);
    txtmercacod.setEnabled(false);
    txtprodescri.setEnabled(false);
    txttotal.setEnabled(false);
    fecha1.setEnabled(false);
    txtdescri.setEnabled(false);
    txtdepcod.setEnabled(false);
    txtdepdescri.setEnabled(false);
    txtdescri.setEnabled(false);
    txtcantidad.setEnabled(false);
}
private void borrar_text(){
    txtcantidad.setText("");
    txtdepcod.setText("");
pedido.setText("");
txtdepdescri.setText("");
    txtcodigo.setText("");
    txtprocod.setText("");
    //combodeposito.removeAllItems();
   // txtcodper.setText("");
    fecha1.setText("");
    txtmercacod.setText("");
    txtdescri.setText("");
    txttotal.setText("");
    fecha1.setText("");
    txtprodescri.setText("");
    //txtcodsucursal.setText("");
    //txtsucurdescri.setText("");

}
private void buscardepo()
    {
        try {
             ver_conex conn = new ver_conex();
            conn.sentencia = conn.conexion.createStatement();
            conn.resultado = conn.sentencia.executeQuery("SELECT * FROM deposito WHERE depo_cod="+txtdepcod.getText());
            boolean encontro = conn.resultado.next();

            if(encontro == true)
            {
                txtdepdescri.setText(conn.resultado.getString("depo_desc"));
            }
            else // no encontro
            {
              JOptionPane.showMessageDialog(null, "No existe un registro con este codigo!", "Atencion", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ordencompra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  private void des_botones() //metodo para deshabilitar botones
     {
         bagregar.setEnabled(false);
	// bmercaderia.setEnabled(false);
        // bproveedor.setEnabled(false);
         bgrabar.setEnabled(true);
         bsalir.setEnabled(false);
	 bcancelar.setEnabled(true);
         banular.setEnabled(false);
       //  baprobar.setEnabled(false);
     }

     private void hab_botones()	// metodo para hab botones
     {
          bagregar.setEnabled(true);
	// bmercaderia.setEnabled(false);
         //bproveedor.setEnabled(false);
         bgrabar.setEnabled(false);
         bsalir.setEnabled(true);
	 bcancelar.setEnabled(false);
         banular.setEnabled(false);
        // boton.setEnabled(false);
      //   bpedidos.setEnabled(false);
        // baprobar.setEnabled(true);
     }
    
    private void mostrar_fecha() {
      
        try {
        ver_conex c=new
                ver_conex();
        c.sentencia=c.conexion.createStatement();
        c.resultado=c.sentencia.executeQuery("select date_format(current_date(),'%d/%m/%Y') as fecha");
            while (c.resultado.next()) {
               fecha1.setText(c.resultado.getString("fecha"));
            }
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
          
          
           private void limpiargrilla()
 {
      for (int i = grilla.getRowCount()-1; i>=0; i--) {
            cursor.removeRow(i);
        }
 }
           
           
            private void gencod()
    {
        try {
            //       Main.inicio = "no";
                   ver_conex conn = new ver_conex();
                   conn.sentencia = conn.conexion.createStatement();
                   conn.resultado = conn.sentencia.executeQuery("SELECT IFNULL(MAX(oc_cod),0)+ 1 AS xxx FROM cabecera_oc");
                   conn.resultado.next();
                  this.txtcodigo.setText(conn.resultado.getString("xxx"));
        } catch (SQLException ex) {
            Logger.getLogger(ordencompra.class.getName()).log(Level.SEVERE, null, ex);
     //   } catch (SQLException ex)
        {
            Logger.getLogger(ordencompra.class.getName()).log(Level.SEVERE, null, ex);
        }



        }
        }
       
            
            private void busca_detalle(){
        ver_conex conn =new ver_conex();
     cursor.setRowCount(0);
     try{
      conn.sentencia = conn.conexion.createStatement();
        String Datosql="SELECT detalle_pedido.prd_cod,producto.prd_nom,detalle_pedido.canti,producto.prd_costo,proveedor.provee_cod,proveedor.provee_nom FROM cabecera_pedidos INNER JOIN detalle_pedido ON cabecera_pedidos.pedi_cod=detalle_pedido.pedi_cod INNER JOIN producto ON producto.prd_cod=detalle_pedido.prd_cod INNER JOIN proveedor ON proveedor.provee_cod=cabecera_pedidos.provee_cod  WHERE cabecera_pedidos.pedi_cod =" + pedido.getText();
        conn.resultado = conn.sentencia.executeQuery(Datosql);
         System.out.println(Datosql);
       boolean encontro = conn.resultado.next();

        if (encontro==true){

          txtprocod.setText(conn.resultado.getString("provee_cod"));
                  txtprodescri.setText(conn.resultado.getString("provee_nom"));
                do{
                  //  c++;
       int aux = 0;
       int acu = 0;
 

             
               
         this.txttotal.setText(String.valueOf(acu));
         cursor.addRow(new Object[]{conn.resultado.getInt("prd_cod"),conn.resultado.getString("prd_nom"),conn.resultado.getInt("canti"),conn.resultado.getInt("prd_costo"),String.valueOf(aux)});
  for(int a=0;a<grilla.getRowCount();a++)
        {
           aux = Integer.parseInt(grilla.getValueAt(a,2).toString()) * Integer.parseInt(grilla.getValueAt(a,3).toString());
            acu = acu + aux;

        }
  this.txttotal.setText(String.valueOf(acu));
                     }while(conn.resultado.next());

        }
     }
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage(), "error de conexion", JOptionPane.ERROR_MESSAGE);
    }
}

//private void caltotales()
//    {
//       int aux = 0;
//       int acu = 0;
//        for(int a=0;a<t.getRowCount();a++)
//        {
//           aux = Integer.parseInt(t.getValueAt(a,3).toString()) * Integer.parseInt(t.getValueAt(a,4).toString());
//            acu = acu + aux;
//
//        }
//         this.Total.setText(String.valueOf(acu));
//
//    }
            
            private void buscar_deposito()
    {
     try
	{

        conn.sentencia = conn.conexion.createStatement();
        conn.resultado = conn.sentencia.executeQuery("SELECT d.depo_cod, d.depo_desc FROM deposito d, detalle_pedido o WHERE  d.depo_cod=o.depo_cod AND o.pedi_cod="+this.pedido.getText());

       if(conn.resultado.next())//si encontro
        {
          this.txtdepcod.setText(conn.resultado.getString("depo_cod"));
          this.txtdepdescri.setText(conn.resultado.getString("depo_desc"));

        }
       else//no encontro
        {
           JOptionPane.showMessageDialog(null,"No hay pedido para este deposito", "MENSAJE",
           JOptionPane.INFORMATION_MESSAGE);
       }

 	}
	catch (SQLException exceptionSql)
	{
		JOptionPane.showMessageDialog(null, exceptionSql.getMessage(), "Error de Conexion con la Base de Datos", JOptionPane.ERROR_MESSAGE);
		System.exit(0);
	}
    }
            
             private void buscar_cod()
    {
     try
	{
 ver_conex conn = new ver_conex();
        conn.sentencia = conn.conexion.createStatement();
        conn.resultado = conn.sentencia.executeQuery("select * from producto where prd_cod="+this.txtmercacod.getText());
      
       if(conn.resultado.next())//si encontro
        {
          this.txtdescri.setText(conn.resultado.getString("prd_nom"));
         // this.txtcantidad.setText(conn.resultado.getString("p"));

       //    iva = conn.resultado.getString("mer_iva");

          this.txtmercacod.setEnabled(false);
          this.txtcantidad.setEnabled(true);
          this.txtcantidad.requestFocus();
        }
       else//no encontro
        {
             JOptionPane.showMessageDialog(null,"CODIGO DE PRODUCTO NO EXISTE", "MENSAJE",
           JOptionPane.INFORMATION_MESSAGE);
       }

 	}
	catch (SQLException exceptionSql)
	{
		JOptionPane.showMessageDialog(null, exceptionSql.getMessage(), "Error de Conexion con la Base de Datos", JOptionPane.ERROR_MESSAGE);
		System.exit(0);
	}
    }
       
             
             private void tirar_grillas() {
        try {
           //ver_conexion co= new ver_conexion();
         //  co.sentencia= co.conexion.createStatement();
//int grilla2= t.getRowCount();

  //  if(grilla2==0)
    //{
int aux;
int acu = 0;
            do{
                   // c++;
            DefaultTableModel dt;
            dt = (DefaultTableModel) grilla.getModel();
            String campos[] = new String[]{txtmercacod.getText(), txtdescri.getText(), txtcantidad.getText()};
           // dt.addRow(new campos[]{String.valueOf(c),tcodinsumo.getText(), insumo.getText(), canti.getText()};

            dt.addRow(campos);
             for(int a=0;a<grilla.getRowCount();a++)
        {
           aux = Integer.parseInt(grilla.getValueAt(a,2).toString()) * Integer.parseInt(grilla.getValueAt(a,3).toString());
            acu = acu + aux;

        }
  this.txttotal.setText(String.valueOf(acu));
            
            }while(conn.resultado.next());

      //            }
//                else{
//                    comparacion();
//                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error" + e, "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
       // bgrabar.setEnabled(true);
          txtdescri.setText("");
            txtcantidad.setText("");
            txtmercacod.setText("");
            txtmercacod.setEnabled(true);
           txtmercacod.requestFocus();
    }
             public void tirardatos(){
                 ver_conex conn =new ver_conex();
   //  cursor.setRowCount(0);
     try{
      conn.sentencia = conn.conexion.createStatement();
     
     // String Datosql="SELECT det_pedido.mer_cod,mercaderia.mer_nom,det_pedido.det_cant,mercaderia.mer_cost FROM det_pedido INNER JOIN mercaderia  ON mercaderia.mer_cod=det_pedido.mer_cod WHERE  mercaderia.mer_cod =" + txtmercacod.getText();
      conn.resultado = conn.sentencia.executeQuery("select * from producto where prd_cod=" + txtmercacod.getText());   
     // conn.resultado = conn.sentencia.executeQuery(Datosql);
      //   System.out.println(Datosql);
       boolean encontro = conn.resultado.next();

        if (encontro==true){

        //  txtprocod.setText(conn.resultado.getString("pro_cod"));
          //        txtprodescri.setText(conn.resultado.getString("pro_nom"));
                
                  //  c++;
       int aux = 0;
       int acu = 0;
 

             
               
      //   this.txttotal.setText(String.valueOf(acu));
         cursor.addRow(new Object[]{conn.resultado.getInt("prd_cod"),conn.resultado.getString("prd_nom"),(txtcantidad.getText()),conn.resultado.getInt("prd_costo"),String.valueOf(aux)});
  for(int a=0;a<grilla.getRowCount();a++)
        {
           aux = Integer.parseInt(grilla.getValueAt(a,2).toString()) * Integer.parseInt(grilla.getValueAt(a,3).toString());
            acu = acu + aux;

        }
  
  this.txttotal.setText(String.valueOf(acu));
  txtdescri.setText("");
            txtcantidad.setText("");
            txtmercacod.setText("");
            txtmercacod.setEnabled(false);
            txtcantidad.setEnabled(false);
            bproducto.requestFocus();
                     

        }
     }
    catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage(), "error de conexion", JOptionPane.ERROR_MESSAGE);
    }
}
             
              private void grabar()
  {
         int res = javax.swing.JOptionPane.showOptionDialog(this,
        "Desea grabar LA ORDEN DE COMPRA?","Demosystem",javax.swing.JOptionPane.OK_CANCEL_OPTION,
        javax.swing.JOptionPane.QUESTION_MESSAGE,null,
        new Object[] { "Si", "No"},"Si");
        if (res == javax.swing.JOptionPane.OK_OPTION)
        {
                    String f = fecha1.getText();
                    String dd = f.substring(0, 2);
                    String mm = f.substring(3, 5);
                    String aa = f.substring(6, 10);
                    String fecha = aa + "/" + mm + "/" + dd;
                    
                    DateFormat df = new SimpleDateFormat(fecha);

        String SQL = null;
          try
          {
       //   String fecha = new SimpleDateFormat("yyyy-MM-dd").format(jdatetext.getDate());
                gencod();// sirve para que no se dupliquen los codigos y no de error cuando se trabaja en redes
            //System.out.println(fecha);
 ver_conex conn = new ver_conex();
            conn.sentencia = conn.conexion.createStatement();
            conn.sentencia = conn.conexion.createStatement();
            
            //graba en la cabecera
          conn.sentencia.executeUpdate("INSERT INTO cabecera_oc(oc_cod,func_cod,depo_cod,provee_cod,suc_cod,pedi_cod,fecha,oc_est,montotal)values("+txtcodigo.getText()+","+txtcodper.getText()+","+txtdepcod.getText()+","+txtprocod.getText()+","+txtcodsucursal.getText()+","+pedido.getText()+",'"+fecha+"','PENDIENTE',"+txttotal.getText()+")");

            //graba en el detalle
            for(int fila=0;fila < grilla.getRowCount();fila++)
            {
                     conn.sentencia.executeUpdate("insert into detalle_oc(oc_cod,prd_cod,cantid,prd_costo)values("+txtcodigo.getText()+","+grilla.getValueAt(fila,0)+","+grilla.getValueAt(fila,2)+","+grilla.getValueAt(fila,3)+")");

                     conn.sentencia = conn.conexion.createStatement();
            conn.sentencia.executeUpdate("update cabecera_pedidos set pedi_est='PROCESADO' where pedi_cod = " + pedido.getText());

             //   conn.sentencia = conn.conexion.createStatement();
               // conn.sentencia.executeUpdate("update mercaderia set mer_cant = mer_cant - "+grilla.getValueAt(fila,3)+" where mer_cod = "+grilla.getValueAt(fila,0));
            }//fin grabacion en detalle

            //generar cuentas a cobrar
           
            
            //fin ctas a cobrar
             JOptionPane.showMessageDialog(null, "la orden de compra Ha sido Grabado satisfactoriamente.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
         genreporte();
          }
        catch(Exception ex)
        {
            Logger.getLogger(ordencompra.class.getName()).log(Level.SEVERE,null,ex);
           // dispose();
        }
       }
       else
       {
           JOptionPane.showMessageDialog(null, "Operacion Cancelada", "Atencion", JOptionPane.ERROR_MESSAGE);
       }
    }//fin grabar
       
public void genreporte() //throws JRException, Exception
    {
        try //throws JRException, Exception
        {
            ver_conex conn = new ver_conex();    
            conn.sentencia = conn.conexion.createStatement();
            conn.resultado = conn.sentencia.executeQuery(" SELECT * FROM cabecera_oc,detalle_oc,producto,funcionario,sucursal,proveedor,usuario,deposito WHERE \n" +
"detalle_oc.oc_cod=cabecera_oc.oc_cod AND producto.prd_cod=detalle_oc.prd_cod AND \n" +
"cabecera_oc.func_cod=funcionario.func_cod  AND cabecera_oc.provee_cod=proveedor.provee_cod AND \n" +
"cabecera_oc.suc_cod=sucursal.suc_cod AND usuario.func_cod=funcionario.func_cod AND cabecera_oc.depo_cod=deposito.depo_cod AND cabecera_oc.oc_cod= "+txtcodigo.getText());
            JRResultSetDataSource jrRS = new JRResultSetDataSource(conn.resultado);

            HashMap parameters = new HashMap();
            URL urlMaestro = getClass().getClassLoader().getResource("reportes/orden de compra.jasper");

            // Cargamos el reporte
            JasperReport masterReport = null;
            masterReport = (JasperReport) JRLoader.loadObject(urlMaestro);
            JasperPrint masterPrint = null;
            masterPrint = JasperFillManager.fillReport(masterReport, parameters, jrRS);
            JasperViewer ventana = new JasperViewer(masterPrint, false);
            ventana.setTitle("Vista Previa");
            ventana.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(pedidos_compra.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(pedidos_compra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
              
               private void validarGrilla()
{
    int grilla2= grilla.getRowCount();

    if(grilla2==0)
    {
        mensajeValidarGrilla(this,"Grilla");
        pedido.requestFocus();
    }
    else
    {
     //   operacion_grabar();

    }
}
               
               private static void mensajeValidarGrilla(JFrame x, String campo)
{
    JOptionPane.showMessageDialog(x,"Debe añadir datos en la "+campo+" antes de continuar","Aviso",JOptionPane.INFORMATION_MESSAGE);
}
               
               
                private void anular()
{

         int res = javax.swing.JOptionPane.showOptionDialog(this,
        "Desea Anular LA ORDEN DE COMPRA?","REGISTRO PEDIDO",javax.swing.JOptionPane.OK_CANCEL_OPTION,
        javax.swing.JOptionPane.QUESTION_MESSAGE,null,
        new Object[] { "Si", "No"},"Si");

        if (res == javax.swing.JOptionPane.OK_OPTION)
        {


      try {
           //  validarCampos3();

ver_conex c= new ver_conex();
            c.sentencia = c.conexion.createStatement();
            c.sentencia.executeUpdate("update cabecera_oc set oc_est='ANULADO' where oc_cod = " + txtcodigo.getText());


                JOptionPane.showMessageDialog(null, "El registro se ha Anulado satisfactoriamente.", "Confirmacion", JOptionPane.INFORMATION_MESSAGE);




            }catch (SQLException ex) {
            Logger.getLogger(ordencompra.class.getName()).log(Level.SEVERE, null, ex);
        }
  } else
       {

           JOptionPane.showMessageDialog(null, "Operacion Cancelada", "Atencion", JOptionPane.ERROR_MESSAGE);
       }


}

                
                private void buscarorden()
    {
        try {
            conn.sentencia = conn.conexion.createStatement();
            conn.resultado = conn.sentencia.executeQuery("SELECT * FROM cabecera_oc INNER JOIN detalle_oc ON cabecera_oc.oc_cod=detalle_oc.oc_cod INNER JOIN producto ON producto.prd_cod=detalle_oc.prd_cod INNER JOIN proveedor ON proveedor.provee_cod=cabecera_oc.provee_cod WHERE cabecera_oc.oc_cod =" + txtcodigo.getText());
            boolean encontro = conn.resultado.next();
             
            if (encontro==true)//encontro
            if (conn.resultado.getString("oc_est").equals("ANULADO"))
                {
                JOptionPane.showMessageDialog(null, "La Orden ya ha sido Anulado", "Atencion", JOptionPane.ERROR_MESSAGE);
                txtcodigo.setText("");
                txtcodigo.requestFocus();
                dispose();
                
                } else if(conn.resultado.getString("oc_est").equals("PROCESADO"))
                {
                JOptionPane.showMessageDialog(null, "La Orden ya ha sido PROCESADA", "Atencion", JOptionPane.ERROR_MESSAGE);
                txtcodigo.setText("");
                txtcodigo.requestFocus();
                dispose();
                }
            else {
                ver_conex conn4 = new ver_conex();
                conn4.sentencia = conn4.conexion.createStatement();
               conn4.resultado = conn4.sentencia.executeQuery  ("SELECT proveedor.provee_cod,proveedor.provee_nom FROM proveedor INNER JOIN cabecera_oc ON proveedor.provee_cod=cabecera_oc.provee_cod WHERE cabecera_oc.oc_cod = "+txtcodigo.getText());
               boolean encontr = conn4.resultado.next();
               if(encontr==true){
                buscar_depositoorden();
                 txtprocod.setText(conn4.resultado.getString("provee_cod"));
                  txtprodescri.setText(conn4.resultado.getString("provee_nom"));
        //  tirar_grilla();
                ///mostrar datos del detalle
            //  ver_conex conn2 = new ver_conex();
               }
               ver_conex conn2 =new ver_conex();//instanciamos
                 conn2.sentencia = conn2.conexion.createStatement();
                 conn2.resultado = conn2.sentencia.executeQuery("select * from detalle_oc  where oc_cod =" + txtcodigo.getText());

                 while(conn2.resultado.next())
                 {
                    ////para la descricion
                    ver_conex conn3 =new ver_conex();//instanciamos
                    conn3.sentencia = conn3.conexion.createStatement();
                    conn3.resultado = conn3.sentencia.executeQuery("select * from producto  where prd_cod =" + conn2.resultado.getString("prd_cod"));
                    conn3.resultado.next();//ubica en el primer registro
                    String registro[] = new String[] {conn2.resultado.getString("prd_cod"),conn3.resultado.getString("prd_nom"),conn2.resultado.getString("cantid"),conn2.resultado.getString("prd_costo")};
                    ////
                    cursor.addRow(registro);
                    txtcantidad.setEnabled(false);
                    txtmercacod.setEnabled(true);
                    txtmercacod.requestFocus();
                     banular.setEnabled(true);
                }
                 
                ///mostrar datos del detalle
                
                   } else{
              JOptionPane.showMessageDialog(null, " No existe pedido con este numero", "Atencion", JOptionPane.ERROR_MESSAGE);

           this.txtcodigo.setEnabled(true);
          this.txtcodigo.requestFocus();
        //  banular.setEnabled(true);
     }
 //    }
    } catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage(), "error de conexion", JOptionPane.ERROR_MESSAGE);
    }
    // this.beditar.setEnabled(true);
    // this.beditar.requestFocus();
}//fin de recorrido
             
                
                   private void buscar_depositoorden()
    {
     try
	{

        conn.sentencia = conn.conexion.createStatement();
        conn.resultado = conn.sentencia.executeQuery("SELECT d.depo_cod, d.depo_desc FROM deposito d, cabecera_oc c WHERE  d.depo_cod=c.depo_cod AND c.depo_cod="+this.txtcodigo.getText());

       if(conn.resultado.next())//si encontro
        {
          this.txtdepcod.setText(conn.resultado.getString("depo_cod"));
          this.txtdepdescri.setText(conn.resultado.getString("depo_desc"));

        }
       else//no encontro
        {
           JOptionPane.showMessageDialog(null,"No hay pedido para este deposito", "MENSAJE",
           JOptionPane.INFORMATION_MESSAGE);
       }

 	}
	catch (SQLException exceptionSql)
	{
		JOptionPane.showMessageDialog(null, exceptionSql.getMessage(), "Error de Conexion con la Base de Datos", JOptionPane.ERROR_MESSAGE);
		System.exit(0);
	}
    }
                   private void buscarfactura() {
        try {
              
            conn.sentencia = conn.conexion.createStatement();
            conn.resultado = conn.sentencia.executeQuery("SELECT * FROM cabecera_pedidos INNER JOIN detalle_pedido ON cabecera_pedidos.pedi_cod=detalle_pedido.pedi_cod INNER JOIN producto ON producto.prd_cod=detalle_pedido.prd_cod INNER JOIN proveedor ON proveedor.provee_cod=cabecera_pedidos.provee_cod WHERE cabecera_pedidos.pedi_cod= " + pedido.getText());
            boolean encontro = conn.resultado.next();

            if (encontro == true)//encontro
            {
            if (conn.resultado.getString("pedi_est").equals("ANULADO"))
                {
                JOptionPane.showMessageDialog(null, "Este pedido ya ha sido Anulado", "Atencion", JOptionPane.ERROR_MESSAGE);
                txtcodigo.setText("");
                txtcodigo.requestFocus();
                dispose();
                               
                }
                 if (conn.resultado.getString("pedi_est").equals("PROCESADO"))
                {
                JOptionPane.showMessageDialog(null, "Este pedido ya ha sido Procesado", "Atencion", JOptionPane.ERROR_MESSAGE);
                txtcodigo.setText("");
                txtcodigo.requestFocus();
                dispose();
                               
                }else  {
                
           
                txtprocod.setText(conn.resultado.getString("provee_cod"));
                txtprodescri.setText(conn.resultado.getString("provee_nom"));
               // fecha1.setText(conn.resultado.getString("fecha"));
                txtdepcod.setText(conn.resultado.getString("depo_cod"));
                //  tirar_grilla();
                ///mostrar datos del detalle
                //  ver_conex conn2 = new ver_conex();

                ver_conex conn2 = new ver_conex();//instanciamos
                conn2.sentencia = conn2.conexion.createStatement();
                conn2.resultado = conn2.sentencia.executeQuery("select * from detalle_pedido  where pedi_cod =" + pedido.getText());

                while (conn2.resultado.next()) {
                    ////para la descricion
                    ver_conex conn3 = new ver_conex();//instanciamos
                    conn3.sentencia = conn3.conexion.createStatement();
                    conn3.resultado = conn3.sentencia.executeQuery("select * from producto  where prd_cod =" + conn2.resultado.getString("prd_cod"));
                    conn3.resultado.next();//ubica en el primer registro
                    String registro[] = new String[]{conn2.resultado.getString("prd_cod"), conn3.resultado.getString("prd_nom"), conn2.resultado.getString("canti")};
                    ////
                    cursor.addRow(registro);
                    txtcantidad.setEnabled(false);
                    txtmercacod.setEnabled(false);
                    bproducto.setEnabled(true);
                    bproducto.requestFocus();
                }
                 }

                ///mostrar datos del detalle

            } else {
                JOptionPane.showMessageDialog(null, " No existe pedido con este numero", "Atencion", JOptionPane.ERROR_MESSAGE);

                this.txtcodigo.setEnabled(true);
                this.txtcodigo.requestFocus();
            }
            //    }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "error de conexion", JOptionPane.ERROR_MESSAGE);
        }
        //this.beditar.setEnabled(true);
      //  this.beditar.requestFocus();
    }//fin de recorrido
             }




